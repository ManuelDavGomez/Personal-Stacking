[
  {
    "name": "NTT",
    "description": "Next.js con TailwindCSS y TypeScript usando el App Router",
    "icons": [
      "https://svgl.app/library/nextjs_icon_dark.svg",
      "https://svgl.app/library/tailwindcss.svg",
      "https://svgl.app/library/typescript.svg"
    ],
    "commands": [
      "npx create-next-app@latest my-next-app --ts --eslint --app",
      "cd my-next-app",
      "npm install -D tailwindcss postcss autoprefixer",
      "npx tailwindcss init -p"
    ]
  },
  {
    "name": "RTT",
    "description": "React con Vite, TailwindCSS y TypeScript",
    "commands": [
      "npm create vite@latest my-react-vite -- --template react-ts",
      "cd my-react-vite",
      "npm install",
      "npm install -D tailwindcss postcss autoprefixer",
      "npx tailwindcss init -p"
    ]
  },
  {
    "name": "MERN",
    "description": "MongoDB + Express + React + Node.js",
    "commands": [
      "npm create vite@latest my-app --template react",
      "cd my-app",
      "npm install express mongoose cors dotenv",
      "npm install --save-dev nodemon"
    ]
  },
  {
    "name": "NPP",
    "description": "Next.js con Prisma ORM y PostgreSQL",
    "commands": [
      "npx create-next-app@latest my-next-prisma --ts --eslint",
      "cd my-next-prisma",
      "npm install prisma @prisma/client",
      "npx prisma init"
    ]
  },
  {
    "name": "RRT",
    "description": "Create React App con Redux Toolkit y TypeScript",
    "commands": [
      "npx create-react-app my-react-redux --template redux-typescript",
      "cd my-react-redux",
      "npm install"
    ]
  },
  {
    "name": "VVT",
    "description": "Vue 3 con Vuex y TailwindCSS usando Vite",
    "commands": [
      "npm create vite@latest my-vue-app -- --template vue",
      "cd my-vue-app",
      "npm install",
      "npm install vuex@next",
      "npm install -D tailwindcss postcss autoprefixer",
      "npx tailwindcss init -p"
    ]
  },
  {
    "name": "NTP",
    "description": "Nuxt 3 con TailwindCSS y Pinia como store",
    "commands": [
      "npx nuxi init my-nuxt-app",
      "cd my-nuxt-app",
      "npm install",
      "npm install -D tailwindcss postcss autoprefixer",
      "npx tailwindcss init -p",
      "npm install pinia"
    ]
  },
  {
    "name": "STT",
    "description": "SvelteKit con TailwindCSS y TypeScript",
    "commands": [
      "npm create svelte@latest my-sveltekit-app",
      "cd my-sveltekit-app",
      "npm install",
      "npm install -D tailwindcss postcss autoprefixer",
      "npx tailwindcss init -p"
    ]
  },
  {
    "name": "AAN",
    "description": "Angular con NgRx para manejo de estado",
    "commands": [
      "npm install -g @angular/cli",
      "ng new my-angular-app --routing --style=css",
      "cd my-angular-app",
      "ng add @ngrx/store"
    ]
  },
  {
    "name": "ST",
    "description": "SolidJS usando Vite y TypeScript",
    "commands": [
      "npm create vite@latest my-solid-app -- --template solid",
      "cd my-solid-app",
      "npm install"
    ]
  },
  {
    "name": "RPP",
    "description": "Remix con PostgreSQL y Prisma ORM",
    "commands": [
      "npx create-remix@latest my-remix-app",
      "cd my-remix-app",
      "npm install",
      "npm install prisma @prisma/client",
      "npx prisma init"
    ]
  },
  {
    "name": "ETTP",
    "description": "Express con TypeScript y TypeORM conectado a PostgreSQL",
    "commands": [
      "mkdir my-express-ts",
      "cd my-express-ts",
      "npm init -y",
      "npm install express reflect-metadata typeorm pg",
      "npm install -D typescript ts-node-dev @types/express",
      "npx tsc --init"
    ]
  },
  {
    "name": "FTPS",
    "description": "Fastify con TypeScript y Prisma usando SQLite",
    "commands": [
      "mkdir my-fastify",
      "cd my-fastify",
      "npm init -y",
      "npm install fastify @fastify/static prisma @prisma/client",
      "npm install -D typescript ts-node-dev",
      "npx prisma init --datasource-provider sqlite",
      "npx tsc --init"
    ]
  },
  {
    "name": "KMM",
    "description": "Koa con MongoDB y Mongoose",
    "commands": [
      "mkdir my-koa-app",
      "cd my-koa-app",
      "npm init -y",
      "npm install koa koa-router mongoose dotenv",
      "npm install -D nodemon"
    ]
  },
  {
    "name": "NTP",
    "description": "NestJS con TypeORM y PostgreSQL",
    "commands": [
      "npm i -g @nestjs/cli",
      "nest new my-nest-app",
      "cd my-nest-app",
      "npm install typeorm pg",
      "npm install --save @nestjs/typeorm"
    ]
  },
  {
    "name": "AdonisJS",
    "description": "Framework AdonisJS en TypeScript para Node.js",
    "commands": [
      "npm init adonis-ts-app@latest my-adonis-app",
      "cd my-adonis-app",
      "npm install"
    ]
  },
  {
    "name": "LM",
    "description": "Laravel con base de datos MySQL",
    "commands": [
      "composer create-project --prefer-dist laravel/laravel my-laravel-app",
      "cd my-laravel-app",
      "php artisan serve"
    ]
  },
  {
    "name": "DP",
    "description": "Django con base de datos PostgreSQL",
    "commands": [
      "python -m venv venv",
      "venv\\Scripts\\activate",
      "pip install django psycopg2-binary",
      "django-admin startproject mydjango",
      "cd mydjango"
    ]
  },
  {
    "name": "FSP",
    "description": "Flask con SQLAlchemy y PostgreSQL",
    "commands": [
      "python -m venv venv",
      "venv\\Scripts\\activate",
      "pip install flask sqlalchemy psycopg2-binary",
      "mkdir myflask",
      "cd myflask",
      "echo.>app.py"
    ]
  },
  {
    "name": "RP",
    "description": "Ruby on Rails con base de datos PostgreSQL",
    "commands": [
      "gem install rails",
      "rails new my-rails-app -d postgresql",
      "cd my-rails-app",
      "rails db:create"
    ]
  },
  {
    "name": "ASP.NET API",
    "description": "API con ASP.NET Core",
    "commands": [
      "dotnet new webapi -o my-dotnet-api",
      "cd my-dotnet-api",
      "dotnet restore"
    ]
  }
]
